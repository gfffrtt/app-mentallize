datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Session {
    id     String @id @default(cuid())
    role   ROLE
    userId String @unique @map("user_id")
    user   User   @relation(fields: [userId], references: [id])
}

model User {
    id       String   @id @default(cuid())
    email    String   @unique @db.VarChar(150)
    password String   @db.Text
    type     ROLE
    staff    Staff?
    client   Client?
    session  Session?

    @@map("user")
}

model Staff {
    id          String        @id @default(cuid())
    group       GROUP
    role        STAFF_ROLE
    user        User          @relation(fields: [userId], references: [id])
    userId      String        @unique @map("user_id")
    staffClinic StaffClinic[]

    @@map("staff")
}

model ClientCellphone {
    id String @id @default(cuid())

    ddd      String         @db.VarChar(2)
    number   String         @db.VarChar(10)
    type     CELLPHONE_TYPE
    client   Client         @relation(fields: [clientId], references: [id])
    clientId String         @map("client_id")

    @@map("client_cellphone")
}

model ClientAddress {
    id            String @id @default(cuid())
    cep           String @db.VarChar(8)
    number        String @db.VarChar(5)
    street        String @db.VarChar(150)
    neighboorhood String @db.VarChar(150)
    city          String @db.VarChar(150)
    state         STATE
    client        Client @relation(fields: [clientId], references: [id])
    clientId      String @map("client_id")

    @@map("client_address")
}

model Client {
    id              String            @id @default(cuid())
    fullName        String            @db.VarChar(200)
    cpf             String?           @db.VarChar(11)
    age             Int?              @db.SmallInt
    gender          GENDER?
    userId          String            @unique @map("user_id")
    user            User              @relation(fields: [userId], references: [id])
    clientCellphone ClientCellphone[]
    clientAddress   ClientAddress[]
    clientClinic    ClientClinic[]

    @@map("client")
}

model ClinicCellphone {
    id       String         @id @default(cuid())
    ddd      String         @db.VarChar(2)
    number   String         @db.VarChar(10)
    type     CELLPHONE_TYPE
    clinic   Clinic         @relation(fields: [clinicId], references: [id])
    clinicId String         @map("clinic_id")

    @@map("clinic_cellphone")
}

model ClinicAddress {
    id            String @id @default(cuid())
    cep           String @db.VarChar(8)
    number        String @db.VarChar(5)
    street        String @db.VarChar(150)
    neighboorhood String @db.VarChar(150)
    city          String @db.VarChar(150)
    state         STATE
    clinic        Clinic @relation(fields: [clinicId], references: [id])
    clinicId      String @map("clinic_id")

    @@map("clinic_address")
}

model Clinic {
    id              String            @id @default(cuid())
    name            String            @db.VarChar(100)
    clinicCellphone ClinicCellphone[]
    clinicAddress   ClinicAddress[]
    clientClinic    ClientClinic[]
    staffClinic     StaffClinic[]
    key             Key[]

    @@map("clinic")
}

model StaffClinic {
    id       String   @id @default(cuid())
    clinic   Clinic   @relation(fields: [clinicId], references: [id])
    clinicId String   @map("clinic_id")
    staff    Staff    @relation(fields: [staffId], references: [id])
    staffId  String   @map("staff_id")
    joinDate DateTime @map("join_date")

    @@map("staff_clinic")
}

model ClientClinic {
    id       String   @id @default(cuid())
    clinic   Clinic   @relation(fields: [clinicId], references: [id])
    clinicId String   @map("clinic_id")
    client   Client   @relation(fields: [clientId], references: [id])
    clientId String   @map("client_id")
    joinDate DateTime @map("join_date")

    @@map("client_clinic")
}

model Key {
    id            String         @id @default(cuid())
    type          TEST_TYPE
    testTaken     Boolean        @map("test_taken")
    createdAt     DateTime       @default(now()) @map("created_at")
    expiresAt     DateTime       @map("expires_at")
    clinic        Clinic         @relation(fields: [clinicId], references: [id])
    clinicId      String         @map("clinic_id")
    fourElements  FourElements?
    circleOfLife  CircleOfLife?
    loveLanguage  LoveLanguage?
    selfKnowledge SelfKnowledge?

    @@map("key")
}

model Result {
    id            String         @id @default(cuid())
    analyzed      Boolean
    startedAt     DateTime
    finishedAt    DateTime
    fourElements  FourElements?
    circleOfLife  CircleOfLife?
    loveLanguage  LoveLanguage?
    selfKnowledge SelfKnowledge?
}

model FourElements {
    id          String   @id @default(cuid())
    first       ELEMENTS
    second      ELEMENTS
    third       ELEMENTS
    fourth      ELEMENTS
    firstScore  Decimal  @map("first_score") @db.Decimal(5, 5)
    secondScore Decimal  @map("second_score") @db.Decimal(5, 5)
    thirdScore  Decimal  @map("third_score") @db.Decimal(5, 5)
    fourthScore Decimal  @map("fourth_score") @db.Decimal(5, 5)
    keyId       String   @unique @map("key_id")
    resultId    String?  @unique @map("result_id")
    key         Key      @relation(fields: [keyId], references: [id])
    result      Result?  @relation(fields: [resultId], references: [id])

    @@map("four_elements")
}

model CircleOfLife {
    id         String  @id @default(cuid())
    average    Decimal @db.Decimal(5, 5)
    total      Decimal @db.Decimal(5, 5)
    spiritual  Int     @db.SmallInt
    mind       Int     @db.SmallInt
    health     Int     @db.SmallInt
    prosperity Int     @db.SmallInt
    career     Int     @db.SmallInt
    love       Int     @db.SmallInt
    fun        Int     @db.SmallInt
    money      Int     @db.SmallInt
    discipline Int     @db.SmallInt
    happiness  Int     @db.SmallInt
    purpose    Int     @db.SmallInt
    keyId      String  @unique @map("key_id")
    resultId   String? @unique @map("result_id")
    key        Key     @relation(fields: [keyId], references: [id])
    result     Result? @relation(fields: [resultId], references: [id])

    @@map("circle_of_life")
}

model LoveLanguage {
    id          String      @id @default(cuid())
    first       PREFERENCES
    second      PREFERENCES
    third       PREFERENCES
    fourth      PREFERENCES
    firstScore  Decimal     @map("first_score") @db.Decimal(5, 5)
    secondScore Decimal     @map("second_score") @db.Decimal(5, 5)
    thirdScore  Decimal     @map("third_score") @db.Decimal(5, 5)
    fourthScore Decimal     @map("fourth_score") @db.Decimal(5, 5)
    keyId       String      @unique @map("key_id")
    resultId    String?     @unique @map("result_id")
    key         Key         @relation(fields: [keyId], references: [id])
    result      Result?     @relation(fields: [resultId], references: [id])

    @@map("love_language")
}

model SelfKnowledge {
    id          String  @id @default(cuid())
    first       TRAITS
    second      TRAITS
    third       TRAITS
    fourth      TRAITS
    firstScore  Decimal @map("first_score") @db.Decimal(5, 5)
    secondScore Decimal @map("second_score") @db.Decimal(5, 5)
    thirdScore  Decimal @map("third_score") @db.Decimal(5, 5)
    fourthScore Decimal @map("fourth_score") @db.Decimal(5, 5)
    keyId       String  @unique @map("key_id")
    resultId    String? @unique @map("result_id")
    key         Key     @relation(fields: [keyId], references: [id])
    result      Result? @relation(fields: [resultId], references: [id])

    @@map("self_knowledge")
}

enum ELEMENTS {
    FOUR_ELEMENTS
    SELF_KNOWLEDGE
    LOVE_LANGUAGE
    CIRCLE_OF_LIFE
}

enum TRAITS {
    VISUAL
    KINESTHETIC
    AUDITORY
    DIGITAL
}

enum PREFERENCES {
    AFIRMATION
    SERVICE
    PRESENTS
    TIME
    TOUCH
}

enum STATE {
    SANTA_CATARINA
    RIO_GRANDE_DO_SUL
    PARANA
    SAO_PAULO
    RIO_DE_JANEIRO
    DISTRITO_FEDERAL
    MATO_GROSSO
    MATO_GROSSO_DO_SUL
    GOIAS
    ACRE
    ALAGOAS
    AMAPA
    AMAZONAS
    BAHIA
    CEARA
    ESPIRITO_SANTO
    MINAS_GERAIS
    MARANHAO
    PARA
    PARAIBA
    PERNAMBUCO
    PIAUI
    RIO_GRANDE_DO_NORTE
    RONDONIO
    RORAIMA
    SERGIPE
    TOCANTINS
}

enum TEST_TYPE {
    FOUR_ELEMENTS
    CIRCLE_OF_LIFE
    LOVE_LANGUAGE
    SELF_KNOWLEDGE
}

enum CELLPHONE_TYPE {
    FIXED
    MOBILE
}

enum GROUP {
    GLOBAL
    SCOPED
}

enum ROLE {
    CLIENT
    STAFF
}

enum STAFF_ROLE {
    ADMIN
    OPERATOR
}

enum GENDER {
    MALE
    FEMALE
}
